#!/usr/bin/php
<?php

use Strukt\Env;
use Strukt\Framework\App as FrameworkApp;
use Strukt\Framework\Configuration;
use Strukt\Console\Color;
use Strukt\Http\Method as HttpMethod;

require "bootstrap.php";

$methods = HttpMethod::getAll();

$argv = $_SERVER["argv"];

array_shift($argv);//xhttp
$arg1 = array_shift($argv);//arg1

if(in_array(strtolower(trim($arg1)), [
	"usage", 
	"help",
	"--help", 
	"-h","?"])){

	echo Color::write("white","\n xhttp");
	echo Color::writeln("blue", " XHTTP is a CLI utility that mimicks a HTTP client.\n");
	echo Color::write("yellow"," Usage");
	echo ": xhttp <method> <route> [params...]\n\n";
	echo sprintf("%s:\n\n", Color::write("yellow"," Arguments"));
	echo sprintf("%s:", Color::write("cyan","    method"));
	echo "     GET, POST ...etc";
	echo sprintf("%s:", Color::write("cyan","\n    route"));
	echo "      Example: /login Default: / root";
	echo sprintf("%s:", Color::write("cyan","\n    parameters"));
	echo " Example: username=pitsolu password=p@55w0rd\n\n";
	echo Color::write("yellow", " Example");
	echo ":  ./xhttp POST /login username=pitsolu password=p@55word\n\n";
	exit;
}

if(!file_exists("cfg/app.ini")){

	echo Color::write("red", "\n Application is not ready!");
	echo " Run:\n";
	echo Color::writeln("yellow","  ./console app:make {{app_name}}");
	echo Color::writeln("yellow","  ./console app:reload\n");
	exit;
}

$method = $arg1;//method
if(!in_array($method, $methods)){

	$uri = $method;
	$method = "GET";
}

if(empty($uri))//uri
	$uri = array_shift($argv);

$params = [];

array_map(function($param) use(&$params){

	list($key, $val) = explode("=", $param);

	$params[$key] = $val;

}, $argv);

if(!in_array(strtoupper(trim($method)), $methods))
	echo Color::writeln("red"," Invalid HTTP method!\n");

$_SERVER["REQUEST_URI"] = $uri;
$_SERVER["REQUEST_METHOD"] = strtoupper(trim($method));
$_REQUEST = $_POST = $params;

Env::withFile();
Env::set("root_dir", getcwd());

FrameworkApp::create("App:Cli");
FrameworkApp::mayBeRepo();

App\Middleware\XSession::config(array(

	"username"=>"admin",
	"allow"=>[

		"strukt:auth",
		// "user_all"
	]
));

$config = new Configuration([

	"ignore"=>["@require"]
]);

$kernel = new App\Kernel($config);
$runner = $kernel->getApp()->run();
$runner = $runner->init();
$response = $kernel->getRouter()->make()->run();
exit(sprintf("%s\n", $response->getContent()));