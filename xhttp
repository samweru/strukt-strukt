#!/usr/bin/php
<?php

use Strukt\Env;
use Strukt\Framework\App as FrameworkApp;
use Strukt\Framework\Configuration;

require "bootstrap.php";

$methods = array(

	"ANY",
	"PUT", 
	"GET", 
	"PATH", 
	"POST", 
	"DELETE",
	"PATCH",
	"OPTIONS"
);

$argv = $_SERVER["argv"];

array_shift($argv);//xhttp
$arg1 = array_shift($argv);//arg1

if(in_array(strtolower(trim($arg1)), [
	"usage", 
	"help",
	"--help", 
	"-h","?"])){

echo <<<EOF

xhttp	XHTTP is a CLI utility that mimicks a HTTP client.

Usage:  xhttp <method> <route> [params...]

Arguments:

  method 		GET, POST ...etc
  route 		Example: /login Default: / root
  parameters  	Example: username=pitsolu password=p@55w0rd

Example:  ./xhttp POST /login username=pitsolu password=p@55word\n\n

EOF; exit;
}

$method = $arg1;//method
if(!in_array($method, $methods)){

	$uri = $method;
	$method = "GET";
}

if(empty($uri))//uri
	$uri = array_shift($argv);

// print_r(array(array("method"=>$method, "uri"=>$uri, "args"=>$argv)));exit;

$params = [];

array_map(function($param) use(&$params){

	list($key, $val) = explode("=", $param);

	$params[$key] = $val;

}, $argv);

if(!in_array(strtoupper(trim($method)), $methods)){

echo <<<EOF

Invalid HTTP method!\n

EOF; exit;
}

$_SERVER["REQUEST_URI"] = $uri;
$_SERVER["REQUEST_METHOD"] = strtoupper(trim($method));
$_REQUEST = $_POST = $params;

Env::withFile();
Env::set("root_dir", getcwd());

FrameworkApp::create("App:Cli");
FrameworkApp::mayBeRepo();

App\Middleware\XSession::create(array(

		"username"=>"admin"
	),
	array(

		"strukt:auth",
		// "user_all"
));

$config = new Configuration();
$config->addIgnore("@require");
$middlewares = $config->get("middlewares");
$middlewares = array_merge([App\Middleware\XSession::class], $middlewares);
$config->set("middlewares", $middlewares);

$kernel = new App\Kernel($config);
$runner = $kernel->getApp()->run();
$runner = $runner->init();
$response = $kernel->getRouter()->make()->run();
// $response = $kernel->getRouter()->debug();
// $response = $kernel->getRouter()->run();
exit(sprintf("%s\n", $response->getContent()));